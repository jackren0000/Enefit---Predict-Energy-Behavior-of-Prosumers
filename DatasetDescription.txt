This competition requires forecasting the electricity generation and consumption 
of Estonian prosumers with solar panels, utilizing weather, energy price data, and 
records of photovoltaic capacity.

It's a time series forecasting contest judged by a private leaderboard based 
on real data collected post-submission. All datasets adhere to the 
EET/EEST (Eastern European Time/ Eastern European Summer Time) time standard.
Most of the variables are a sum or an average over a period of 1 hour. 
The datetime column always gives the start of the 1-hour period. 
However, for the weather datasets, some variables such as temperature or cloud cover, 
are given for a specific time, which is always the end of the 1-hour period.

Files:
tain.csv:

county - An ID code for the county.
is_business - Boolean for whether or not the prosumer is a business.
product_type - ID code with the following mapping of codes to contract types: {0: "Combined", 1: "Fixed", 2: "General service", 3: "Spot"}.
target - The consumption or production amount for the relevant segment for the hour. The segments are defined by the county, is_business, and product_type.
is_consumption - Boolean for whether or not this row's target is consumption or production.
datetime - The Estonian time in EET (UTC+2) / EEST (UTC+3). It describes the start of the 1-hour period on which target is given.
data_block_id - All rows sharing the same data_block_id will be available at the same forecast time. This is a function of what information is available when forecasts are actually made, at 11 AM each morning. For example, if the forecast weather data_block_id for predictins made on October 31st is 100 then the historic weather data_block_id for October 31st will be 101 as the historic weather data is only actually available the next day.
row_id - A unique identifier for the row.
prediction_unit_id - A unique identifier for the county, is_business, and product_type combination. New prediction units can appear or disappear in the test set.

gas_prices.csv:

origin_date - The date when the day-ahead prices became available.
forecast_date - The date when the forecast prices should be relevant.
[lowest/highest]_price_per_mwh - The lowest/highest price of natural gas that on the day ahead market that trading day, in Euros per megawatt hour equivalent.
data_block_id

client.csv:

product_type
county - An ID code for the county. See county_id_to_name_map.json for the mapping of ID codes to county names.
eic_count - The aggregated number of consumption points (EICs - European Identifier Code).
installed_capacity - Installed photovoltaic solar panel capacity in kilowatts.
is_business - Boolean for whether or not the prosumer is a business.
date
data_block_id

electricity_prices.csv:

origin_date
forecast_date - Represents the start of the 1-hour period when the price is valid
euros_per_mwh - The price of electricity on the day ahead markets in euros per megawatt hour.
data_block_id





public_timeseries_testing_util.py An optional file intended to make it easier to run custom offline API tests. See the script's docstring for details. You will need to edit this file before using it.

example_test_files/ Data intended to illustrate how the API functions. Includes the same files and columns delivered by the API. The first three data_block_ids are repeats of the last three data_block_ids in the train set.

example_test_files/sample_submission.csv A valid sample submission, delivered by the API. See this notebook for a very simple example of how to use the sample submission.

example_test_files/revealed_targets.csv The actual target values from the day before the forecast time. This amounts to two days of lag relative to the prediction times in the test.csv.

enefit/ Files that enable the API. Expect the API to deliver all rows in under 15 minutes and to reserve less than 0.5 GB of memory. The copy of the API that you can download serves the data from example_test_files/. You must make predictions for those dates in order to advance the API but those predictions are not scored. Expect to see roughly three months of data delivered initially and up to ten months of data by the end of the forecasting period.
